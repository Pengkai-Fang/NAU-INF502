### Part 1: Dealing with git

To conduct this, you will have to download [handson.zip](handson.zip) and unzip it.
handson folder is a git repository. Using the command line change the directory to "handson/"

represent the content you need to fill and post on your private repository




1. Draw a diagram of the commits and branches in repository.

$ git branch
* master
  math

11631@DESKTOP-B1DB3NV MINGW64 ~/Desktop/学习/INF502/git/handson (master)
$ git checkout math
Switched to branch 'math'

11631@DESKTOP-B1DB3NV MINGW64 ~/Desktop/学习/INF502/git/handson (math)
$ git log --decorate
commit e3c629dd524712aedea96d7dbaad1c50d12b5b5e (HEAD -> math)
Author: Igor Steinmacher <igorsteinmacher@gmail.com>
Date:   Wed Aug 14 23:13:48 2019 -0700

    Adding some more knowledge to the function

commit 654b490a181dedf82dd6deda5f9848d6cca05918
Author: Igor Steinmacher <igorsteinmacher@gmail.com>
Date:   Wed Aug 14 23:12:14 2019 -0700

    Added a draft of A.py

commit 2dfb02c3f9383d6c3b2695c99e175d8b85f594a1
Author: Igor Steinmacher <igorsteinmacher@gmail.com>
Date:   Wed Aug 14 23:08:47 2019 -0700

     Creating all files (all empty)


2. Try `git log --graph --all` to see the commit tree. What do you see?

$ git log --graph --all
* commit 18931d12a8be7cac049b73c6bc8136e9482f3371 (master)
| Author: Igor Steinmacher <igorsteinmacher@gmail.com>
| Date:   Wed Aug 14 23:15:28 2019 -0700
|
|     Making a small change here
|
| * commit e3c629dd524712aedea96d7dbaad1c50d12b5b5e (HEAD -> math)
|/  Author: Igor Steinmacher <igorsteinmacher@gmail.com>
|   Date:   Wed Aug 14 23:13:48 2019 -0700
|
|       Adding some more knowledge to the function
|
* commit 654b490a181dedf82dd6deda5f9848d6cca05918
| Author: Igor Steinmacher <igorsteinmacher@gmail.com>
| Date:   Wed Aug 14 23:12:14 2019 -0700
|
|     Added a draft of A.py
|
* commit 2dfb02c3f9383d6c3b2695c99e175d8b85f594a1
  Author: Igor Steinmacher <igorsteinmacher@gmail.com>
  Date:   Wed Aug 14 23:08:47 2019 -0700

       Creating all files (all empty)


3. Use `git diff BRANCH_NAME` to view the differences from a branch and the current branch.
   Summarize the difference from master to the other branch.

$ git diff master
diff --git a/A.py b/A.py
index dc1e9bd..0afa98c 100644
--- a/A.py
+++ b/A.py
@@ -1,3 +1,11 @@
 #this is just an example, do not freak out
 def calculate_this(operator, num1, num2):
-   print 'my knowledge is limited'
+   if operator == 'sum':
+      print num1 + num2
+      print 'That was easy buddy'
+   else:
+      if operator == 'subtraction':
+         print num1 - num2
+         print 'I could handle that...'
+      else:
+         print 'my knowledge is limited'
diff --git a/B.py b/B.py
index c63f94c..e69de29 100644
--- a/B.py
+++ b/B.py
@@ -1 +0,0 @@
-# Another file that will receive a line of code... at least.

Summary: Only one line code in the master branch, but there are two files in the master and math branch.

4. Write a command sequence to merge the non-master branch into `master`

$ git merge math
Updating 18931d1..f197c7f 
Fast-forward
 A.py | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

5. Write a command (or sequence) to (i) create a new branch called `math` (from the `master`) 
and (ii) change to this branch

$ git branch -d math
Deleted branch math (was f197c7f).

$ git checkout -b math
Switched to a new branch 'math'

6. Edit B.py adding the following source code below the content you have there

$ vi B.py
print 'I know math, look:' 
print 2+2

7. Write a command (or sequence) to commit your changes

$ git commit

8. Change back to the `master` branch and change B.py adding the following source code (commit your change to `master`):

$ git checkout master

$ vi B.py

9. Write a command sequence to merge the `math` branch into `master` and describe what happened

$ git add . B.py

$ git commit -m 'hello world!'

$ git merge math
Auto-merging B.py
CONFLICT (content): Merge conflict in B.py
Automatic merge failed; fix conflicts and then commit the result.
   
10. Write a set of commands to abort the merge

$ git merge --abort
  
11. Now repeat item 9, but proceed with the manual merge (Editing B.py). All implemented methods are needed. Explain your procedure

I am modifying the B.py file in math and master respectively.

12. Write a command (or set of commands) to proceed with the merge and make `master` branch up-to-date

$ git merge math
Updating f197c7f..e6f90b4
Fast-forward
 .swp | Bin 0 -> 12288 bytes
 B.py |   5 +++++
 2 files changed, 5 insertions(+)
 create mode 100644 .swp
 
$ git merge math
Already up to date.



